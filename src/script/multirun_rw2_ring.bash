#! /bin/bash

# Script for multiple runs with different random seeds.
# This is specifically for 1D ring shaped network. Basic structure is the ring and agents don't move while opinions can change.
# X-size will be the same as ngents, and Y-size will be one.

if (( $# != 10 )); then
	echo "Usage: $0 <nagents> <total_time> <time_interval> <number_edges> <int_range> <init_method> <network> <update_method> <convergence_check_period> <# of runs>"
	echo "  time_interval < 0: no snapshot for ag, sg, agents", ==0: output for only the final_time.
	echo "  number_edges: 0: no AG, different filenames, -1: file input (agraph.in)"
	echo "	init_method: 0-random, 1-from file (agents.in)"
	echo "	network: 0-no network stat, 1-network stat"
	echo "	update_method: 4-plain, 5-sine-like"
	echo "	"
	echo "information about summary files:"
	echo "	summary~_edges: number of edges for all runs (input: summary file for each run)"
	echo "	summary~_times: final time (or converged time) for all runs (input: summary file for each run)"
	echo "	summary~_conv: number of AG clusters for all runs (input: summary file for each run)"
	echo "	summary~: 1st line: <# of not converged> <# of converged> <# of all runs> <# of not converged>/<# of all runs>"
	echo " 		  >1 lines: <# of opinion groups> <# of runs> (input: summary~_time and summary~_conv)"
	echo "	summary~_nvalues: average and SD from summary~_nopinions  (input: summary~_nopinions, using stat2_rw2.bash)"
	echo "		*note: cluster file: generated by RWMain (format: <AG cluster id> <agent id> <opinion>)"
	exit 1
fi

if (( ${10} > 10000 )); then
	echo "  Too big # of all runs (Max=10000)."
	exit 1
fi

executable="RW2Sim"
cp $HOME"/bin/"$executable .

pos1=`expr index $4 -`

if (( $pos1 == 1 )); then
   	num_edge=-1
   	evalue="File"
else
	pos2=`expr index  $4 123456789`
	if (( $pos2 != 0 )); then
		num_edge=`expr substr $4 $pos2 8`
	else
		num_edge=0
	fi
   	evalue=$4
fi

if (( $5 < 0 ))
then
	int_range=0
else
	int_range=$5
fi
   filename1="summary_n"$1"_e"$evalue"_i"$int_range
   filename3="opinion_n"$1"_e"$evalue"_i"$int_range
   filename5="snapshot_n"$1"_e"$evalue"_i"$int_range
   filename6="param_n"$1"_e"$evalue"_i"$int_range

   for ((i=1; i<=${10}; i++))
   do
	echo "<RUN $i> ==============================="
	if (( $i < 10 ))
	then
		filename_s=$filename1"_000"$i
		filename_op=$filename3"_000"$i
		filename_snap=$filename5"_000"$i
		filename_in=$filename6"_000"$i
	elif (( $i < 100 ))
	then
		filename_s=$filename1"_00"$i
		filename_op=$filename3"_00"$i
		filename_snap=$filename5"_00"$i
		filename_in=$filename6"_00"$i
	elif (( $i < 1000 ))
	then
		filename_s=$filename1"_0"$i
		filename_op=$filename3"_0"$i
		filename_snap=$filename5"_0"$i
		filename_in=$filename6"_0"$i
	elif (( $i < 10000 ))
	then
		filename_s=$filename1"_"$i
		filename_op=$filename3"_"$i
		filename_snap=$filename5"_"$i
		filename_in=$filename6"_"$i
	else 
		filename_s=$filename1"_0000"
		filename_op=$filename3"_0000"
		filename_snap=$filename5"_0000"
		filename_in=$filename6"_0000"
	fi
	if (( $5 < 0 ))
	then
		echo "sg_effect			false" > $filename_in
		echo "int_range			0" >> $filename_in
	else
		echo "sg_effect			true" > $filename_in
		echo "int_range			$5" >> $filename_in
	fi
	echo "ysize		1" >> $filename_in
	echo "gullibility	1" >> $filename_in
	echo "opinion_topology	2" >> $filename_in
	echo "op_threshold 	0.5" >> $filename_in
	echo "update_method	$8" >> $filename_in
	echo "standard_dev		0.2" >> $filename_in
	echo "agent_max_speed		0" >> $filename_in
	echo "convergence_method	1" >> $filename_in
	convergence_period=$9
	echo "convergence_check_period	$convergence_period" >> $filename_in
	echo "ag_threshold	1" >> $filename_in
	echo "neighbor_type_sg	1" >> $filename_in
	echo "neighbor_type_movement	1" >> $filename_in
	echo "op_init_method		1" >> $filename_in
	if (( $6 > 0 ))
	then
		echo "if_agents_in		true" >> $filename_in
		echo "in_agents_file		agents.in" >> $filename_in
	else
		echo "if_agents_in		false" >> $filename_in
	fi
	
	echo "nagents 		$1" >> $filename_in
	echo "total_time	$2" >> $filename_in
	echo "xsize		$1" >> $filename_in
	echo "geometry		0" >> $filename_in
	max_rn=$(( $2 + 5 ))
	echo "max_rn		$max_rn" >> $filename_in
	if (( $num_edge < 0 ))
	then
		echo "if_agraph_in		true" >> $filename_in
		echo "in_agraph_file		agraph.in" >> $filename_in
		echo "in_agraph_file_format	1" >> $filename_in
		echo "in_agraph_method		0" >> $filename_in
	else
		echo "if_agraph_in		false" >> $filename_in
		echo "in_agraph_method		0" >> $filename_in
		echo "num_edges 		$num_edge" >> $filename_in
		echo "wiring_prob  		0" >> $filename_in
	fi
	
	echo "if_agent_out false" >> $filename_in
	echo "if_cluster_out false" >> $filename_in
	echo "if_summary_out true" >> $filename_in
	echo "out_summary_file 	$filename_s" >> $filename_in
	if (( $7 > 0 ))
	then
		echo "if_network_stat_out true" >> $filename_in
		echo "out_network_stat_time 	-1" >> $filename_in
	else
		echo "if_network_stat_out false" >> $filename_in
	fi
	echo "if_ag_snapshot_out false" >> $filename_in
	echo "if_sg_snapshot_out false" >> $filename_in
	echo "if_components_out false" >> $filename_in

	if (( $3 < 0 ))
	then
		echo "if_snapshot_out false" >> $filename_in
	else
		echo "if_snapshot_out true" >> $filename_in
		echo "out_snapshot_file	$filename_snap" >> $filename_in
		echo "out_snapshot_interval $3" >> $filename_in
	fi

	rseed1=$(( i * 20000000 + $num_edge ))
	echo "rseed1 $rseed1" >> $filename_in
	rseed2=$(( 2000000000 + $i * 1000000 + $num_edge ))
	echo "rseed2 $rseed2" >> $filename_in

	if ./$executable $filename_in
	then
		if (( $i == 1 ))
		then
			gawk '{if ($1=="time") print $2;}' $filename_s > $filename1"_time"
			gawk '{if ($1=="edges") print $2;}' $filename_s > $filename1"_edges"
			cat $filename_s > $filename1
			gawk 'BEGIN{cvg=0;}{if ($1=="converged" && $2>0) {
					cvg=$2; print $2, $3, $4, $5, $6;
				}; 
				if (!cvg && $1=="av_diff_x") dx=$2;
				if (!cvg && $1=="av_diff_y") dy=$2;
				if (!cvg && $1=="av_diff_p") dp=$2;
			   }END{
				if (!cvg) print 0, dx, dy, dp;}' $filename_s > $filename1"_conv"
#			GetFinalValues $1 $filename_snap > $filename1"_sigma"
		else
			gawk '{if ($1=="time") print $2;}' $filename_s >> $filename1"_time"
			gawk '{if ($1=="edges") print $2;}' $filename_s >> $filename1"_edges"
			cat $filename_s >> $filename1
			gawk 'BEGIN{cvg=0;}{if ($1=="converged" && $2>0) {
					cvg=$2; print $2, $3, $4, $5, $6;
				}; 
				if (!cvg && $1=="av_diff_x") dx=$2;
				if (!cvg && $1=="av_diff_y") dy=$2;
				if (!cvg && $1=="av_diff_p") dp=$2;
			   }END{
				if (!cvg) print 0, dx, dy, dp;}' $filename_s >> $filename1"_conv"
#			GetFinalValues $1 $filename_snap >> $filename1"_sigma"
		fi
		
	
	   if (( $3 < 0 ))
	   then
		echo "No Grahic output!"
	   else
		echo "nagents 		$1" > getgraphs.in
		echo "xsize		$1" >> getgraphs.in
		echo "ysize		1" >> getgraphs.in
		echo "i_time		0" >> getgraphs.in
		echo "f_time		$2" >> getgraphs.in
		echo "time_interval 	$3" >> getgraphs.in
		echo "in_file	$filename_snap" >> getgraphs.in
		if (( $3 == 0 ))
		then
			echo "graph_method	4" >> getgraphs.in
		else
			echo "graph_method	2" >> getgraphs.in
		fi
		gawk -v total_time=$2 -v conv_period=$convergence_period '{if ($1=="time") print "given_time", ($2==total_time ? $2 : $2+conv_period);}' $filename_s >> getgraphs.in
	
		GetGraphs getgraphs.in
		filename_gif=$filename_snap".gif"
		filename_data=$filename_snap"*.data*"
		filename_gnuplot=$filename_snap"*.gnuplot"
		rm -f $filename_data
		rm -f $filename_gnuplot
	   fi
	fi
   done

   gawk -v nruns=${10} -v nedges=$4 'BEGIN{max=0;cnt=0;for (i=0;i<=10;i++) count[i]=0;}{count[$1]++; if (max<$1) max=$1;cnt++;}END{for (i=0;i<=max;i++) print i, count[i]/nruns, nedges;}' $filename1"_conv" > $filename1"_converged"
   sort -n -k3,3 $filename1"_conv" | gawk '{print $3}' > $filename1"_sigma.sorted"
   gawk -v nruns=${10} -v nedges=$4 'BEGIN{count=0}{if($1==0) count++;}END{print nedges, count/nruns}' $filename1"_sigma.sorted" > $filename1"_converged_bc"

#   rm -f $executable

   gawk -v finaltime=$2 -v nrun=${10} 'BEGIN{cnt=0;}{if ($1<finaltime) cnt++;}\
	END{print cnt, nrun-cnt, nrun, cnt/nrun;}' $filename1"_time" > $filename1
   gawk -v nrun=${10} 'BEGIN{max=0;}{cnt[$1]++;if ($1>max) max=$1;}\
	END{for (i=0;i<=max;i++) print i, cnt[i];}' $filename1"_conv" >> $filename1

   filename1_each=$filename1"_[0-9]???"
   filename6_each=$filename6"_????"
   tar zcf $filename1".tgz" $filename1_each
   tar zcf $filename6".tgz" $filename6_each
   rm -f $filename1_each
   rm -f $filename6_each
   if (( $3 >= 0 )); then
	filename5_each=$filename5"_????"
	tar zcf $filename5".tgz" $filename5_each
	rm -f $filename5_each
	filename7_each=$filename5"_????.gif"
	tar zcf $filename5"gif.tgz" $filename7_each
	rm -f $filename7_each
   fi

